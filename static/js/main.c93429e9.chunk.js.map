{"version":3,"sources":["store/store.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useExploreStore","create","set","get","mapPos","lat","lng","setMapPosition","pos","console","log","currentLevelIndex","currentLevelMessages","GameConfig","levels","messages","remainingMessageCount","length","updateGameState","scannedMessages","newLevel","gameOver","setCurrentLevelIndex","isMapEnabled","isScannerEnabled","level","setIsMapEnabled","isEnabled","setIsScannerEnabled","addScannedMessage","message","push","remainingCount","App","state","useEffect","_jsx","className","children","QrReader","onResult","constraints","facingMode","containerStyle","width","height","overflow","videoStyle","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","container","document","getElementById","ReactDOM","render"],"mappings":"q8BA4BO,MAAMA,EAAkBC,kBAC7B,CAACC,EAAKC,KAAG,CACPC,OAAQ,CAAEC,IAAK,kBAAmBC,KAAM,oBACxCC,eAAiBC,IACfN,EAAI,CAAEE,OAAQI,IACdC,QAAQC,IAAI,mBAAmB,EAEjCC,kBAAmB,EACnBC,qBAAsBC,EAAWC,OAAO,GAAGC,SAC3CC,sBAAuBH,EAAWC,OAAO,GAAGC,SAASE,OACrDC,gBAAiBA,KACf,GAAIf,IAAMS,qBAAqBK,SAAWd,IAAMgB,gBAAgBF,OAC9D,OAEFR,QAAQC,IAAI,2BACZ,MAAMU,EAAWjB,IAAMQ,kBAAoB,EACvCS,IAAaP,EAAWC,OAAOG,OACjCf,EAAI,CAAEmB,UAAU,KAEhBlB,IAAMmB,qBAAqBF,GAC3BlB,EAAI,CAAEqB,cAAc,EAAMC,kBAAkB,IAC9C,EASFF,qBAAuBG,IACrBvB,EAAI,CACFS,kBAAmBc,EACnBb,qBAAsBC,EAAWC,OAAOW,GAAOV,SAC/CI,gBAAiB,GACjBH,sBAAuBH,EAAWC,OAAOW,GAAOV,SAASE,QACzD,EAEJM,cAAc,EACdG,gBAAkBC,IAChBzB,EAAI,CAAEqB,aAAcI,GAAY,EAElCH,kBAAkB,EAClBI,oBAAsBD,IACpBzB,EAAI,CAAEsB,iBAAkBG,GAAY,EAEtCN,UAAU,EACVF,gBAAiB,GACjBU,kBAAoBC,IAClB,MAAMf,EAAWZ,IAAMgB,gBACvBJ,EAASgB,KAAKD,GACd,MAAME,EAAiB7B,IAAMa,sBAAwB,EACrDd,EAAI,CAAEiB,gBAAiBJ,EAAUC,sBAAuBgB,GAAiB,M,kBC9BhEC,MA1Cf,WACuBjC,GAAiBkC,GAAUA,EAAMX,eAC9BvB,GAAiBkC,GAAUA,EAAMR,kBAChC1B,GAAiBkC,GAAUA,EAAMV,mBAF1D,MAGMI,EAAsB5B,GACzBkC,GAAUA,EAAMN,sBAMnB,OAJiB5B,GAAiBkC,GAAUA,EAAMb,WAClDc,qBAAU,KACRP,GAAoB,EAAK,GACxB,IAEDQ,cAAA,OAAKC,UAAU,MAAKC,SAclBF,cAACG,IAAQ,CACPC,SAAUA,KACR/B,QAAQC,IAAI,SAAS,EAEvB+B,YAAa,CAAEC,WAAY,eAC3BC,eAAgB,CACdC,MAAO,QACPC,OAAQ,QACRC,SAAU,WAEZC,WAAY,CAAEH,MAAO,QAASC,OAAQ,QAASC,SAAU,cAIjE,EClCeE,MAZUC,IACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EAAY,GAExB,E,MCLF,MAAMS,EAAYC,SAASC,eAAe,QAC7BC,IAASC,OAAO1B,cAACH,EAAG,IAAKyB,GAOtCV,G","file":"static/js/main.c93429e9.chunk.js","sourcesContent":["import { create } from \"zustand\";\nimport GameConfig from \"../game-config.json\";\n\nexport type Position = {\n  lat: number;\n  lng: number;\n};\n\ntype ExploreStoreState = {\n  mapPos: Position;\n  currentLevelIndex: number;\n  isMapEnabled: boolean;\n  currentLevelMessages: string[];\n  scannedMessages: string[];\n  isScannerEnabled: boolean;\n  remainingMessageCount: number;\n  gameOver: boolean;\n};\n\ntype ExploreStoreActions = {\n  setMapPosition: (pos: Position) => void;\n  setCurrentLevelIndex: (level: number) => void;\n  setIsMapEnabled: (isEnabled: boolean) => void;\n  updateGameState: () => void;\n  setIsScannerEnabled: (isEnabled: boolean) => void;\n  addScannedMessage: (message: string) => void;\n};\n\nexport const useExploreStore = create<ExploreStoreActions & ExploreStoreState>(\n  (set, get) => ({\n    mapPos: { lat: 35.30489293472487, lng: -120.66246462042335 },\n    setMapPosition: (pos: Position) => {\n      set({ mapPos: pos });\n      console.log(\"updating map pos\");\n    },\n    currentLevelIndex: 0,\n    currentLevelMessages: GameConfig.levels[0].messages,\n    remainingMessageCount: GameConfig.levels[0].messages.length,\n    updateGameState: () => {\n      if (get().currentLevelMessages.length !== get().scannedMessages.length) {\n        return;\n      }\n      console.log(\"incrementing game level\");\n      const newLevel = get().currentLevelIndex + 1;\n      if (newLevel === GameConfig.levels.length) {\n        set({ gameOver: true });\n      } else {\n        get().setCurrentLevelIndex(newLevel);\n        set({ isMapEnabled: true, isScannerEnabled: false });\n      }\n\n      // set({\n      //   currentLevel: newLevel,\n      //   currentLevelMessages: GameConfig.levels[newLevel].messages,\n      //   isMapEnabled: true,\n      //   isScannerEnabled: false,\n      // });\n    },\n    setCurrentLevelIndex: (level: number) => {\n      set({\n        currentLevelIndex: level,\n        currentLevelMessages: GameConfig.levels[level].messages,\n        scannedMessages: [],\n        remainingMessageCount: GameConfig.levels[level].messages.length,\n      });\n    },\n    isMapEnabled: false,\n    setIsMapEnabled: (isEnabled: boolean) => {\n      set({ isMapEnabled: isEnabled });\n    },\n    isScannerEnabled: false,\n    setIsScannerEnabled: (isEnabled: boolean) => {\n      set({ isScannerEnabled: isEnabled });\n    },\n    gameOver: false,\n    scannedMessages: [],\n    addScannedMessage: (message: string) => {\n      const messages = get().scannedMessages;\n      messages.push(message);\n      const remainingCount = get().remainingMessageCount - 1;\n      set({ scannedMessages: messages, remainingMessageCount: remainingCount });\n    },\n  })\n);\n","import React, { useEffect } from \"react\";\nimport { Map } from \"./features/map/Map\";\nimport \"./App.css\";\nimport WelcomeMessage from \"./features/WelcomeMessage\";\nimport { useExploreStore } from \"./store/store\";\nimport { Scanner } from \"./features/Scanner/Scanner\";\nimport { GameOver } from \"./features/gameover/GameOver\";\nimport { QrReader } from \"react-qr-reader\";\nfunction App() {\n  const isMapEnabled = useExploreStore((state) => state.isMapEnabled);\n  const setIsMapEnabled = useExploreStore((state) => state.setIsMapEnabled);\n  const isScannerEnabled = useExploreStore((state) => state.isScannerEnabled);\n  const setIsScannerEnabled = useExploreStore(\n    (state) => state.setIsScannerEnabled\n  );\n  const gameOver = useExploreStore((state) => state.gameOver);\n  useEffect(() => {\n    setIsScannerEnabled(true);\n  }, []);\n  return (\n    <div className=\"App\">\n      {/* {!gameOver ? (\n        <>\n          {!isMapEnabled && !isScannerEnabled && (\n            <div id=\"welcome-message\">\n              <WelcomeMessage />\n            </div>\n          )}\n          <Scanner />\n          <Map />\n        </>\n      ) : (\n        <GameOver />\n      )} */}\n      <QrReader\n        onResult={() => {\n          console.log(\"result\");\n        }}\n        constraints={{ facingMode: \"environment\" }}\n        containerStyle={{\n          width: \"100vw\",\n          height: \"100vh\",\n          overflow: \"visible\",\n        }}\n        videoStyle={{ width: \"100vw\", height: \"100vh\", overflow: \"visible\" }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\n\nconst container = document.getElementById(\"root\");\nconst root = ReactDOM.render(<App />, container);\n\n// If you want to start measuring performance in your app, pass a function\n\n// to log results (for example: reportWebVitals(console.log))\n\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}